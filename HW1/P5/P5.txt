# Your discussion here

I made an algorithm that starts from both the root node as well as the end node, and it looks for an intersection in the
iteration results. In this way I try to limit the number of nodes that need to be visited to find the path(s).

The distance from Kevin Bacon to Harvard is 2 steps:
('Harvard_University', 2)
E.g.:
['Harvard_University', 'Matt_Damon', 'Gene_Hackman', Kevin_Bacon']

The distance from Harvard to Kevin Bacon is 3 steps:
('Kevin_Bacon', 3)
E.g:
['Kevin_Bacon', 'Six_degrees_of_separation', 'Harvard_University']

For the connected components it was a real bummer that my algorithm completed with a few hours, but the 'Write failed -
Pipe Broken'. Afterwards I was out of AWS credits, so I do not have the actual answers. I may add those after the
deadline. But I do at least know it runs succesfully!

For the bipartite graph, the number of connected components is .., and the largest components is .. nodes.
For the undirected graph, the number of connected components is .., and the largest components is .. nodes.

# Collaborated with Andrew Petschek